// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class currentTermsApproved extends ethereum.Event {
  get params(): currentTermsApproved__Params {
    return new currentTermsApproved__Params(this);
  }
}

export class currentTermsApproved__Params {
  _event: currentTermsApproved;

  constructor(event: currentTermsApproved) {
    this._event = event;
  }

  get approvedBidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class newBidSent extends ethereum.Event {
  get params(): newBidSent__Params {
    return new newBidSent__Params(this);
  }
}

export class newBidSent__Params {
  _event: newBidSent;

  constructor(event: newBidSent) {
    this._event = event;
  }

  get Bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get speedtargetBidder(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get targetbountyBidder(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class BidTracker__loadBidderTermsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class BidTracker__loadOwnerTermsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class BidTracker extends ethereum.SmartContract {
  static bind(address: Address): BidTracker {
    return new BidTracker("BidTracker", address);
  }

  all_bidders(param0: BigInt): Address {
    let result = super.call("all_bidders", "all_bidders(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_all_bidders(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "all_bidders",
      "all_bidders(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  basePrice(): i32 {
    let result = super.call("basePrice", "basePrice():(uint16)", []);

    return result[0].toI32();
  }

  try_basePrice(): ethereum.CallResult<i32> {
    let result = super.tryCall("basePrice", "basePrice():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAllBidderAddresses(): Array<Address> {
    let result = super.call(
      "getAllBidderAddresses",
      "getAllBidderAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllBidderAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllBidderAddresses",
      "getAllBidderAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  loadBidderTerms(_bidder: Address): BidTracker__loadBidderTermsResult {
    let result = super.call(
      "loadBidderTerms",
      "loadBidderTerms(address):(uint256[],uint256[])",
      [ethereum.Value.fromAddress(_bidder)]
    );

    return new BidTracker__loadBidderTermsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_loadBidderTerms(
    _bidder: Address
  ): ethereum.CallResult<BidTracker__loadBidderTermsResult> {
    let result = super.tryCall(
      "loadBidderTerms",
      "loadBidderTerms(address):(uint256[],uint256[])",
      [ethereum.Value.fromAddress(_bidder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BidTracker__loadBidderTermsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  loadOwnerTerms(): BidTracker__loadOwnerTermsResult {
    let result = super.call(
      "loadOwnerTerms",
      "loadOwnerTerms():(uint256[],uint256[])",
      []
    );

    return new BidTracker__loadOwnerTermsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_loadOwnerTerms(): ethereum.CallResult<BidTracker__loadOwnerTermsResult> {
    let result = super.tryCall(
      "loadOwnerTerms",
      "loadOwnerTerms():(uint256[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BidTracker__loadOwnerTermsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerApproval(): boolean {
    let result = super.call("ownerApproval", "ownerApproval():(bool)", []);

    return result[0].toBoolean();
  }

  try_ownerApproval(): ethereum.CallResult<boolean> {
    let result = super.tryCall("ownerApproval", "ownerApproval():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  projectName(): string {
    let result = super.call("projectName", "projectName():(string)", []);

    return result[0].toString();
  }

  try_projectName(): ethereum.CallResult<string> {
    let result = super.tryCall("projectName", "projectName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  speedtargetOwner(param0: BigInt): BigInt {
    let result = super.call(
      "speedtargetOwner",
      "speedtargetOwner(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_speedtargetOwner(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "speedtargetOwner",
      "speedtargetOwner(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  targetbountyOwner(param0: BigInt): BigInt {
    let result = super.call(
      "targetbountyOwner",
      "targetbountyOwner(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_targetbountyOwner(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetbountyOwner",
      "targetbountyOwner(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winningBidder(): Address {
    let result = super.call("winningBidder", "winningBidder():(address)", []);

    return result[0].toAddress();
  }

  try_winningBidder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "winningBidder",
      "winningBidder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ConditionalToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _Superfluid(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _speedtargets(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _bounties(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveBidderTermsCall extends ethereum.Call {
  get inputs(): ApproveBidderTermsCall__Inputs {
    return new ApproveBidderTermsCall__Inputs(this);
  }

  get outputs(): ApproveBidderTermsCall__Outputs {
    return new ApproveBidderTermsCall__Outputs(this);
  }
}

export class ApproveBidderTermsCall__Inputs {
  _call: ApproveBidderTermsCall;

  constructor(call: ApproveBidderTermsCall) {
    this._call = call;
  }

  get _bidder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveBidderTermsCall__Outputs {
  _call: ApproveBidderTermsCall;

  constructor(call: ApproveBidderTermsCall) {
    this._call = call;
  }
}

export class CallReportPayoutsCall extends ethereum.Call {
  get inputs(): CallReportPayoutsCall__Inputs {
    return new CallReportPayoutsCall__Inputs(this);
  }

  get outputs(): CallReportPayoutsCall__Outputs {
    return new CallReportPayoutsCall__Outputs(this);
  }
}

export class CallReportPayoutsCall__Inputs {
  _call: CallReportPayoutsCall;

  constructor(call: CallReportPayoutsCall) {
    this._call = call;
  }

  get questionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get outcome(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class CallReportPayoutsCall__Outputs {
  _call: CallReportPayoutsCall;

  constructor(call: CallReportPayoutsCall) {
    this._call = call;
  }
}

export class CallSplitPositionCall extends ethereum.Call {
  get inputs(): CallSplitPositionCall__Inputs {
    return new CallSplitPositionCall__Inputs(this);
  }

  get outputs(): CallSplitPositionCall__Outputs {
    return new CallSplitPositionCall__Outputs(this);
  }
}

export class CallSplitPositionCall__Inputs {
  _call: CallSplitPositionCall;

  constructor(call: CallSplitPositionCall) {
    this._call = call;
  }

  get tokenaddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get parent(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get conditionId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get partition(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CallSplitPositionCall__Outputs {
  _call: CallSplitPositionCall;

  constructor(call: CallSplitPositionCall) {
    this._call = call;
  }
}

export class NewBidderTermsCall extends ethereum.Call {
  get inputs(): NewBidderTermsCall__Inputs {
    return new NewBidderTermsCall__Inputs(this);
  }

  get outputs(): NewBidderTermsCall__Outputs {
    return new NewBidderTermsCall__Outputs(this);
  }
}

export class NewBidderTermsCall__Inputs {
  _call: NewBidderTermsCall;

  constructor(call: NewBidderTermsCall) {
    this._call = call;
  }

  get _speedtargets(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _bounties(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class NewBidderTermsCall__Outputs {
  _call: NewBidderTermsCall;

  constructor(call: NewBidderTermsCall) {
    this._call = call;
  }
}

export class SetPositionsCall extends ethereum.Call {
  get inputs(): SetPositionsCall__Inputs {
    return new SetPositionsCall__Inputs(this);
  }

  get outputs(): SetPositionsCall__Outputs {
    return new SetPositionsCall__Outputs(this);
  }
}

export class SetPositionsCall__Inputs {
  _call: SetPositionsCall;

  constructor(call: SetPositionsCall) {
    this._call = call;
  }
}

export class SetPositionsCall__Outputs {
  _call: SetPositionsCall;

  constructor(call: SetPositionsCall) {
    this._call = call;
  }
}

export class TransferCTtoBidderCall extends ethereum.Call {
  get inputs(): TransferCTtoBidderCall__Inputs {
    return new TransferCTtoBidderCall__Inputs(this);
  }

  get outputs(): TransferCTtoBidderCall__Outputs {
    return new TransferCTtoBidderCall__Outputs(this);
  }
}

export class TransferCTtoBidderCall__Inputs {
  _call: TransferCTtoBidderCall;

  constructor(call: TransferCTtoBidderCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TransferCTtoBidderCall__Outputs {
  _call: TransferCTtoBidderCall;

  constructor(call: TransferCTtoBidderCall) {
    this._call = call;
  }
}

export class UpdateOracleCall extends ethereum.Call {
  get inputs(): UpdateOracleCall__Inputs {
    return new UpdateOracleCall__Inputs(this);
  }

  get outputs(): UpdateOracleCall__Outputs {
    return new UpdateOracleCall__Outputs(this);
  }
}

export class UpdateOracleCall__Inputs {
  _call: UpdateOracleCall;

  constructor(call: UpdateOracleCall) {
    this._call = call;
  }

  get newOracleAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateOracleCall__Outputs {
  _call: UpdateOracleCall;

  constructor(call: UpdateOracleCall) {
    this._call = call;
  }
}
